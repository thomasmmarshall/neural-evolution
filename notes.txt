The goal of this program is to simulate the neural evolution of a small creature in a simple environment.
The creature will have approximately 231 neurons in its brain as the Tunicate or Sea Squirt does in reality.
Our creatures brain is therefore modeled after the Tunicate.

The environment to the creature will be partially observable. That being said it can observe its environment in a radius
of R around itself. Its actions are to move UP, LEFT, DOWN, RIGHT or STAY. Mathematically this can be modeled as such
that the action taken presently is a function of the observations. There is no state. 

The neural structure will be as follows:
    -   8 Inputs, each indicating the status of the observable squares within radius R of the individual. For arguments
        sake let's say the creature can only see the 8 squares surrounding itself. 
    -   Hidden layer 1: 3 neurons
    -   Hidden layer 2: 2 neurons
    -   5 Outputs, UP, LEFT, DOWN, RIGHT and STAY. 
    -   Total of 240 trainable parameters within the individual brain (no bias). 

Thoughts for later:
    -   Add/remove bias?
    -   More or less hidden layers?
    -   What happens when neurons are added/removed?
    -   Consider adding a speedup button for the real-time simulation.
    -   Consider adding a skip generation button and skip 10, 100, 1000 generations button.

How this program is going to work on a high level:
    1.  Open the graphics window.
    2.  Initialize a population of N individuals with statistically sound weights in their brains.
    3.  Allow the population to act in the environment for a fixed amount of time.
    4.  Evaluate the fitness of the population.
    5.  Cull the individuals below the fitness threshold. 
    6.  Perform neural crossover of the survivors.
    7.  Repeat for M generations.
    
What do I need to create:
    1.  Class for individual including genes, actions, observation, state and location.
    2.  Mechanism to store the population.
    3.  Function to display the current status of the population visually. 

Have the main thread render the game, then have another thread compute the updates
